// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: replication.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KiteCoordinationClient is the client API for KiteCoordination service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KiteCoordinationClient interface {
	PushShardAssignments(ctx context.Context, opts ...grpc.CallOption) (KiteCoordination_PushShardAssignmentsClient, error)
	NewTerm(ctx context.Context, in *NewTermRequest, opts ...grpc.CallOption) (*NewTermResponse, error)
	BecomeLeader(ctx context.Context, in *BecomeLeaderRequest, opts ...grpc.CallOption) (*BecomeLeaderResponse, error)
	AddFollower(ctx context.Context, in *AddFollowerRequest, opts ...grpc.CallOption) (*AddFollowerResponse, error)
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	DeleteShard(ctx context.Context, in *DeleteShardRequest, opts ...grpc.CallOption) (*DeleteShardResponse, error)
}

type kiteCoordinationClient struct {
	cc grpc.ClientConnInterface
}

func NewKiteCoordinationClient(cc grpc.ClientConnInterface) KiteCoordinationClient {
	return &kiteCoordinationClient{cc}
}

func (c *kiteCoordinationClient) PushShardAssignments(ctx context.Context, opts ...grpc.CallOption) (KiteCoordination_PushShardAssignmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &KiteCoordination_ServiceDesc.Streams[0], "/proto.replication.KiteCoordination/PushShardAssignments", opts...)
	if err != nil {
		return nil, err
	}
	x := &kiteCoordinationPushShardAssignmentsClient{stream}
	return x, nil
}

type KiteCoordination_PushShardAssignmentsClient interface {
	Send(*ShardAssignments) error
	CloseAndRecv() (*CoordinationShardAssignmentsResponse, error)
	grpc.ClientStream
}

type kiteCoordinationPushShardAssignmentsClient struct {
	grpc.ClientStream
}

func (x *kiteCoordinationPushShardAssignmentsClient) Send(m *ShardAssignments) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kiteCoordinationPushShardAssignmentsClient) CloseAndRecv() (*CoordinationShardAssignmentsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CoordinationShardAssignmentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kiteCoordinationClient) NewTerm(ctx context.Context, in *NewTermRequest, opts ...grpc.CallOption) (*NewTermResponse, error) {
	out := new(NewTermResponse)
	err := c.cc.Invoke(ctx, "/proto.replication.KiteCoordination/NewTerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kiteCoordinationClient) BecomeLeader(ctx context.Context, in *BecomeLeaderRequest, opts ...grpc.CallOption) (*BecomeLeaderResponse, error) {
	out := new(BecomeLeaderResponse)
	err := c.cc.Invoke(ctx, "/proto.replication.KiteCoordination/BecomeLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kiteCoordinationClient) AddFollower(ctx context.Context, in *AddFollowerRequest, opts ...grpc.CallOption) (*AddFollowerResponse, error) {
	out := new(AddFollowerResponse)
	err := c.cc.Invoke(ctx, "/proto.replication.KiteCoordination/AddFollower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kiteCoordinationClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/proto.replication.KiteCoordination/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kiteCoordinationClient) DeleteShard(ctx context.Context, in *DeleteShardRequest, opts ...grpc.CallOption) (*DeleteShardResponse, error) {
	out := new(DeleteShardResponse)
	err := c.cc.Invoke(ctx, "/proto.replication.KiteCoordination/DeleteShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KiteCoordinationServer is the server API for KiteCoordination service.
// All implementations must embed UnimplementedKiteCoordinationServer
// for forward compatibility
type KiteCoordinationServer interface {
	PushShardAssignments(KiteCoordination_PushShardAssignmentsServer) error
	NewTerm(context.Context, *NewTermRequest) (*NewTermResponse, error)
	BecomeLeader(context.Context, *BecomeLeaderRequest) (*BecomeLeaderResponse, error)
	AddFollower(context.Context, *AddFollowerRequest) (*AddFollowerResponse, error)
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	DeleteShard(context.Context, *DeleteShardRequest) (*DeleteShardResponse, error)
	mustEmbedUnimplementedKiteCoordinationServer()
}

// UnimplementedKiteCoordinationServer must be embedded to have forward compatible implementations.
type UnimplementedKiteCoordinationServer struct {
}

func (UnimplementedKiteCoordinationServer) PushShardAssignments(KiteCoordination_PushShardAssignmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method PushShardAssignments not implemented")
}
func (UnimplementedKiteCoordinationServer) NewTerm(context.Context, *NewTermRequest) (*NewTermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTerm not implemented")
}
func (UnimplementedKiteCoordinationServer) BecomeLeader(context.Context, *BecomeLeaderRequest) (*BecomeLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BecomeLeader not implemented")
}
func (UnimplementedKiteCoordinationServer) AddFollower(context.Context, *AddFollowerRequest) (*AddFollowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollower not implemented")
}
func (UnimplementedKiteCoordinationServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedKiteCoordinationServer) DeleteShard(context.Context, *DeleteShardRequest) (*DeleteShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShard not implemented")
}
func (UnimplementedKiteCoordinationServer) mustEmbedUnimplementedKiteCoordinationServer() {}

// UnsafeKiteCoordinationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KiteCoordinationServer will
// result in compilation errors.
type UnsafeKiteCoordinationServer interface {
	mustEmbedUnimplementedKiteCoordinationServer()
}

func RegisterKiteCoordinationServer(s grpc.ServiceRegistrar, srv KiteCoordinationServer) {
	s.RegisterService(&KiteCoordination_ServiceDesc, srv)
}

func _KiteCoordination_PushShardAssignments_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KiteCoordinationServer).PushShardAssignments(&kiteCoordinationPushShardAssignmentsServer{stream})
}

type KiteCoordination_PushShardAssignmentsServer interface {
	SendAndClose(*CoordinationShardAssignmentsResponse) error
	Recv() (*ShardAssignments, error)
	grpc.ServerStream
}

type kiteCoordinationPushShardAssignmentsServer struct {
	grpc.ServerStream
}

func (x *kiteCoordinationPushShardAssignmentsServer) SendAndClose(m *CoordinationShardAssignmentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kiteCoordinationPushShardAssignmentsServer) Recv() (*ShardAssignments, error) {
	m := new(ShardAssignments)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KiteCoordination_NewTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiteCoordinationServer).NewTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.replication.KiteCoordination/NewTerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiteCoordinationServer).NewTerm(ctx, req.(*NewTermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KiteCoordination_BecomeLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BecomeLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiteCoordinationServer).BecomeLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.replication.KiteCoordination/BecomeLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiteCoordinationServer).BecomeLeader(ctx, req.(*BecomeLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KiteCoordination_AddFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFollowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiteCoordinationServer).AddFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.replication.KiteCoordination/AddFollower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiteCoordinationServer).AddFollower(ctx, req.(*AddFollowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KiteCoordination_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiteCoordinationServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.replication.KiteCoordination/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiteCoordinationServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KiteCoordination_DeleteShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiteCoordinationServer).DeleteShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.replication.KiteCoordination/DeleteShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiteCoordinationServer).DeleteShard(ctx, req.(*DeleteShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KiteCoordination_ServiceDesc is the grpc.ServiceDesc for KiteCoordination service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KiteCoordination_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.replication.KiteCoordination",
	HandlerType: (*KiteCoordinationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTerm",
			Handler:    _KiteCoordination_NewTerm_Handler,
		},
		{
			MethodName: "BecomeLeader",
			Handler:    _KiteCoordination_BecomeLeader_Handler,
		},
		{
			MethodName: "AddFollower",
			Handler:    _KiteCoordination_AddFollower_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _KiteCoordination_GetStatus_Handler,
		},
		{
			MethodName: "DeleteShard",
			Handler:    _KiteCoordination_DeleteShard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushShardAssignments",
			Handler:       _KiteCoordination_PushShardAssignments_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "replication.proto",
}

// KiteLogReplicationClient is the client API for KiteLogReplication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KiteLogReplicationClient interface {
	Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*TruncateResponse, error)
	Replicate(ctx context.Context, opts ...grpc.CallOption) (KiteLogReplication_ReplicateClient, error)
	SendSnapshot(ctx context.Context, opts ...grpc.CallOption) (KiteLogReplication_SendSnapshotClient, error)
}

type kiteLogReplicationClient struct {
	cc grpc.ClientConnInterface
}

func NewKiteLogReplicationClient(cc grpc.ClientConnInterface) KiteLogReplicationClient {
	return &kiteLogReplicationClient{cc}
}

func (c *kiteLogReplicationClient) Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*TruncateResponse, error) {
	out := new(TruncateResponse)
	err := c.cc.Invoke(ctx, "/proto.replication.KiteLogReplication/Truncate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kiteLogReplicationClient) Replicate(ctx context.Context, opts ...grpc.CallOption) (KiteLogReplication_ReplicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &KiteLogReplication_ServiceDesc.Streams[0], "/proto.replication.KiteLogReplication/Replicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &kiteLogReplicationReplicateClient{stream}
	return x, nil
}

type KiteLogReplication_ReplicateClient interface {
	Send(*Append) error
	Recv() (*Ack, error)
	grpc.ClientStream
}

type kiteLogReplicationReplicateClient struct {
	grpc.ClientStream
}

func (x *kiteLogReplicationReplicateClient) Send(m *Append) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kiteLogReplicationReplicateClient) Recv() (*Ack, error) {
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kiteLogReplicationClient) SendSnapshot(ctx context.Context, opts ...grpc.CallOption) (KiteLogReplication_SendSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &KiteLogReplication_ServiceDesc.Streams[1], "/proto.replication.KiteLogReplication/SendSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &kiteLogReplicationSendSnapshotClient{stream}
	return x, nil
}

type KiteLogReplication_SendSnapshotClient interface {
	Send(*SnapshotChunk) error
	CloseAndRecv() (*SnapshotResponse, error)
	grpc.ClientStream
}

type kiteLogReplicationSendSnapshotClient struct {
	grpc.ClientStream
}

func (x *kiteLogReplicationSendSnapshotClient) Send(m *SnapshotChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kiteLogReplicationSendSnapshotClient) CloseAndRecv() (*SnapshotResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SnapshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KiteLogReplicationServer is the server API for KiteLogReplication service.
// All implementations must embed UnimplementedKiteLogReplicationServer
// for forward compatibility
type KiteLogReplicationServer interface {
	Truncate(context.Context, *TruncateRequest) (*TruncateResponse, error)
	Replicate(KiteLogReplication_ReplicateServer) error
	SendSnapshot(KiteLogReplication_SendSnapshotServer) error
	mustEmbedUnimplementedKiteLogReplicationServer()
}

// UnimplementedKiteLogReplicationServer must be embedded to have forward compatible implementations.
type UnimplementedKiteLogReplicationServer struct {
}

func (UnimplementedKiteLogReplicationServer) Truncate(context.Context, *TruncateRequest) (*TruncateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Truncate not implemented")
}
func (UnimplementedKiteLogReplicationServer) Replicate(KiteLogReplication_ReplicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Replicate not implemented")
}
func (UnimplementedKiteLogReplicationServer) SendSnapshot(KiteLogReplication_SendSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method SendSnapshot not implemented")
}
func (UnimplementedKiteLogReplicationServer) mustEmbedUnimplementedKiteLogReplicationServer() {}

// UnsafeKiteLogReplicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KiteLogReplicationServer will
// result in compilation errors.
type UnsafeKiteLogReplicationServer interface {
	mustEmbedUnimplementedKiteLogReplicationServer()
}

func RegisterKiteLogReplicationServer(s grpc.ServiceRegistrar, srv KiteLogReplicationServer) {
	s.RegisterService(&KiteLogReplication_ServiceDesc, srv)
}

func _KiteLogReplication_Truncate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiteLogReplicationServer).Truncate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.replication.KiteLogReplication/Truncate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiteLogReplicationServer).Truncate(ctx, req.(*TruncateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KiteLogReplication_Replicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KiteLogReplicationServer).Replicate(&kiteLogReplicationReplicateServer{stream})
}

type KiteLogReplication_ReplicateServer interface {
	Send(*Ack) error
	Recv() (*Append, error)
	grpc.ServerStream
}

type kiteLogReplicationReplicateServer struct {
	grpc.ServerStream
}

func (x *kiteLogReplicationReplicateServer) Send(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kiteLogReplicationReplicateServer) Recv() (*Append, error) {
	m := new(Append)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KiteLogReplication_SendSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KiteLogReplicationServer).SendSnapshot(&kiteLogReplicationSendSnapshotServer{stream})
}

type KiteLogReplication_SendSnapshotServer interface {
	SendAndClose(*SnapshotResponse) error
	Recv() (*SnapshotChunk, error)
	grpc.ServerStream
}

type kiteLogReplicationSendSnapshotServer struct {
	grpc.ServerStream
}

func (x *kiteLogReplicationSendSnapshotServer) SendAndClose(m *SnapshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kiteLogReplicationSendSnapshotServer) Recv() (*SnapshotChunk, error) {
	m := new(SnapshotChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KiteLogReplication_ServiceDesc is the grpc.ServiceDesc for KiteLogReplication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KiteLogReplication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.replication.KiteLogReplication",
	HandlerType: (*KiteLogReplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Truncate",
			Handler:    _KiteLogReplication_Truncate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Replicate",
			Handler:       _KiteLogReplication_Replicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendSnapshot",
			Handler:       _KiteLogReplication_SendSnapshot_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "replication.proto",
}
