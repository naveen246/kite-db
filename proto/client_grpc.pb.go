// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: client.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KiteClientClient is the client API for KiteClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KiteClientClient interface {
	//*
	// Gets all shard-to-server assignments as a stream. Each set of assignments
	// in the response stream will contain all the assignments to bring the client
	// up to date. For example, if a shard is split, the stream will return a
	// single response containing all the new shard assignments as opposed to
	// multiple stream responses, each containing a single shard assignment.
	//
	// Clients should connect to a single random server which will stream the
	// assignments for all shards on all servers.
	GetShardAssignments(ctx context.Context, in *ShardAssignmentsRequest, opts ...grpc.CallOption) (KiteClient_GetShardAssignmentsClient, error)
	//*
	// Batches put, delete and delete_range requests.
	//
	// Clients should send this request to the shard leader. In the future,
	// this may be handled server-side in a proxy layer.
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	//*
	// Batches get requests.
	//
	// Clients should send this request to the shard leader. In the future,
	// this may be handled server-side in a proxy layer.
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (KiteClient_ReadClient, error)
	//*
	// Requests all the keys between a range of keys.
	//
	// Clients should send an equivalent request to all respective shards.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (KiteClient_ListClient, error)
	//*
	// Client sends shard_id and receives map of key to created/modified/deleted
	GetNotifications(ctx context.Context, in *NotificationsRequest, opts ...grpc.CallOption) (KiteClient_GetNotificationsClient, error)
	//
	// Creates a new client session. Sessions are kept alive by regularly sending
	// heartbeats via the KeepAlive rpc.
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	//
	// Sends a heartbeat to prevent the session from timing out.
	KeepAlive(ctx context.Context, in *SessionHeartbeat, opts ...grpc.CallOption) (*KeepAliveResponse, error)
	//
	// Closes a session and removes all ephemeral values associated with it.
	CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error)
}

type kiteClientClient struct {
	cc grpc.ClientConnInterface
}

func NewKiteClientClient(cc grpc.ClientConnInterface) KiteClientClient {
	return &kiteClientClient{cc}
}

func (c *kiteClientClient) GetShardAssignments(ctx context.Context, in *ShardAssignmentsRequest, opts ...grpc.CallOption) (KiteClient_GetShardAssignmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &KiteClient_ServiceDesc.Streams[0], "/proto.client.KiteClient/GetShardAssignments", opts...)
	if err != nil {
		return nil, err
	}
	x := &kiteClientGetShardAssignmentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KiteClient_GetShardAssignmentsClient interface {
	Recv() (*ShardAssignments, error)
	grpc.ClientStream
}

type kiteClientGetShardAssignmentsClient struct {
	grpc.ClientStream
}

func (x *kiteClientGetShardAssignmentsClient) Recv() (*ShardAssignments, error) {
	m := new(ShardAssignments)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kiteClientClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/proto.client.KiteClient/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kiteClientClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (KiteClient_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &KiteClient_ServiceDesc.Streams[1], "/proto.client.KiteClient/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &kiteClientReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KiteClient_ReadClient interface {
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type kiteClientReadClient struct {
	grpc.ClientStream
}

func (x *kiteClientReadClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kiteClientClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (KiteClient_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &KiteClient_ServiceDesc.Streams[2], "/proto.client.KiteClient/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &kiteClientListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KiteClient_ListClient interface {
	Recv() (*ListResponse, error)
	grpc.ClientStream
}

type kiteClientListClient struct {
	grpc.ClientStream
}

func (x *kiteClientListClient) Recv() (*ListResponse, error) {
	m := new(ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kiteClientClient) GetNotifications(ctx context.Context, in *NotificationsRequest, opts ...grpc.CallOption) (KiteClient_GetNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &KiteClient_ServiceDesc.Streams[3], "/proto.client.KiteClient/GetNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &kiteClientGetNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KiteClient_GetNotificationsClient interface {
	Recv() (*NotificationBatch, error)
	grpc.ClientStream
}

type kiteClientGetNotificationsClient struct {
	grpc.ClientStream
}

func (x *kiteClientGetNotificationsClient) Recv() (*NotificationBatch, error) {
	m := new(NotificationBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kiteClientClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, "/proto.client.KiteClient/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kiteClientClient) KeepAlive(ctx context.Context, in *SessionHeartbeat, opts ...grpc.CallOption) (*KeepAliveResponse, error) {
	out := new(KeepAliveResponse)
	err := c.cc.Invoke(ctx, "/proto.client.KiteClient/KeepAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kiteClientClient) CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error) {
	out := new(CloseSessionResponse)
	err := c.cc.Invoke(ctx, "/proto.client.KiteClient/CloseSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KiteClientServer is the server API for KiteClient service.
// All implementations must embed UnimplementedKiteClientServer
// for forward compatibility
type KiteClientServer interface {
	//*
	// Gets all shard-to-server assignments as a stream. Each set of assignments
	// in the response stream will contain all the assignments to bring the client
	// up to date. For example, if a shard is split, the stream will return a
	// single response containing all the new shard assignments as opposed to
	// multiple stream responses, each containing a single shard assignment.
	//
	// Clients should connect to a single random server which will stream the
	// assignments for all shards on all servers.
	GetShardAssignments(*ShardAssignmentsRequest, KiteClient_GetShardAssignmentsServer) error
	//*
	// Batches put, delete and delete_range requests.
	//
	// Clients should send this request to the shard leader. In the future,
	// this may be handled server-side in a proxy layer.
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	//*
	// Batches get requests.
	//
	// Clients should send this request to the shard leader. In the future,
	// this may be handled server-side in a proxy layer.
	Read(*ReadRequest, KiteClient_ReadServer) error
	//*
	// Requests all the keys between a range of keys.
	//
	// Clients should send an equivalent request to all respective shards.
	List(*ListRequest, KiteClient_ListServer) error
	//*
	// Client sends shard_id and receives map of key to created/modified/deleted
	GetNotifications(*NotificationsRequest, KiteClient_GetNotificationsServer) error
	//
	// Creates a new client session. Sessions are kept alive by regularly sending
	// heartbeats via the KeepAlive rpc.
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	//
	// Sends a heartbeat to prevent the session from timing out.
	KeepAlive(context.Context, *SessionHeartbeat) (*KeepAliveResponse, error)
	//
	// Closes a session and removes all ephemeral values associated with it.
	CloseSession(context.Context, *CloseSessionRequest) (*CloseSessionResponse, error)
	mustEmbedUnimplementedKiteClientServer()
}

// UnimplementedKiteClientServer must be embedded to have forward compatible implementations.
type UnimplementedKiteClientServer struct {
}

func (UnimplementedKiteClientServer) GetShardAssignments(*ShardAssignmentsRequest, KiteClient_GetShardAssignmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetShardAssignments not implemented")
}
func (UnimplementedKiteClientServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedKiteClientServer) Read(*ReadRequest, KiteClient_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedKiteClientServer) List(*ListRequest, KiteClient_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedKiteClientServer) GetNotifications(*NotificationsRequest, KiteClient_GetNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedKiteClientServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedKiteClientServer) KeepAlive(context.Context, *SessionHeartbeat) (*KeepAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedKiteClientServer) CloseSession(context.Context, *CloseSessionRequest) (*CloseSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (UnimplementedKiteClientServer) mustEmbedUnimplementedKiteClientServer() {}

// UnsafeKiteClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KiteClientServer will
// result in compilation errors.
type UnsafeKiteClientServer interface {
	mustEmbedUnimplementedKiteClientServer()
}

func RegisterKiteClientServer(s grpc.ServiceRegistrar, srv KiteClientServer) {
	s.RegisterService(&KiteClient_ServiceDesc, srv)
}

func _KiteClient_GetShardAssignments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShardAssignmentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KiteClientServer).GetShardAssignments(m, &kiteClientGetShardAssignmentsServer{stream})
}

type KiteClient_GetShardAssignmentsServer interface {
	Send(*ShardAssignments) error
	grpc.ServerStream
}

type kiteClientGetShardAssignmentsServer struct {
	grpc.ServerStream
}

func (x *kiteClientGetShardAssignmentsServer) Send(m *ShardAssignments) error {
	return x.ServerStream.SendMsg(m)
}

func _KiteClient_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiteClientServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.client.KiteClient/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiteClientServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KiteClient_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KiteClientServer).Read(m, &kiteClientReadServer{stream})
}

type KiteClient_ReadServer interface {
	Send(*ReadResponse) error
	grpc.ServerStream
}

type kiteClientReadServer struct {
	grpc.ServerStream
}

func (x *kiteClientReadServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _KiteClient_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KiteClientServer).List(m, &kiteClientListServer{stream})
}

type KiteClient_ListServer interface {
	Send(*ListResponse) error
	grpc.ServerStream
}

type kiteClientListServer struct {
	grpc.ServerStream
}

func (x *kiteClientListServer) Send(m *ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _KiteClient_GetNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KiteClientServer).GetNotifications(m, &kiteClientGetNotificationsServer{stream})
}

type KiteClient_GetNotificationsServer interface {
	Send(*NotificationBatch) error
	grpc.ServerStream
}

type kiteClientGetNotificationsServer struct {
	grpc.ServerStream
}

func (x *kiteClientGetNotificationsServer) Send(m *NotificationBatch) error {
	return x.ServerStream.SendMsg(m)
}

func _KiteClient_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiteClientServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.client.KiteClient/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiteClientServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KiteClient_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionHeartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiteClientServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.client.KiteClient/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiteClientServer).KeepAlive(ctx, req.(*SessionHeartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _KiteClient_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiteClientServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.client.KiteClient/CloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiteClientServer).CloseSession(ctx, req.(*CloseSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KiteClient_ServiceDesc is the grpc.ServiceDesc for KiteClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KiteClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.client.KiteClient",
	HandlerType: (*KiteClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _KiteClient_Write_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _KiteClient_CreateSession_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _KiteClient_KeepAlive_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _KiteClient_CloseSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetShardAssignments",
			Handler:       _KiteClient_GetShardAssignments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _KiteClient_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "List",
			Handler:       _KiteClient_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetNotifications",
			Handler:       _KiteClient_GetNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "client.proto",
}
